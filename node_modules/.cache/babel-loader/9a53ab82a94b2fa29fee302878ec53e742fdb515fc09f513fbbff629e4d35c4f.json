{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport axios from '@/axios';\nexport default {\n  data() {\n    return {\n      item: '',\n      items: [],\n      chart: null // Chart instance\n    };\n  },\n\n  methods: {\n    getData() {\n      axios.get(\"/\").then(response => {\n        this.items = response.data;\n        this.updateChart();\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    updateChart() {\n      // Access the canvas element and create a chart with the fetched data\n      let ctx = document.getElementById('sensorChart').getContext('2d');\n      let labels = this.items.map(item => item.created_at);\n      let values = this.items.map(item => item.ultrasonic);\n      if (this.chart) {\n        this.chart.destroy(); // destroy existing Chart instance\n      }\n\n      this.chart = new Chart(ctx, {\n        type: 'bar',\n        // Set the chart type to bar\n        data: {\n          labels: labels,\n          // Set the labels for the x-axis\n          datasets: [{\n            label: 'Water Level (Cm)',\n            // Set the label for the chart\n            data: values,\n            // Set the data for the y-axis\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            // Set the background color for the bars\n            borderColor: 'rgba(75, 192, 192, 1)',\n            // Set the border color for the bars\n            borderWidth: 1 // Set the border width for the bars\n          }]\n        },\n\n        options: {\n          //animation: true,\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  },\n  mounted() {\n    setInterval(this.getData, 2000);\n  }\n};","map":{"version":3,"names":["Chart","axios","data","item","items","chart","methods","getData","get","then","response","updateChart","catch","error","console","log","ctx","document","getElementById","getContext","labels","map","created_at","values","ultrasonic","destroy","type","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","mounted","setInterval"],"sources":["C:\\Users\\LEGION\\t\\Project_Magang-1\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <h1>Fetch Sensor Data</h1>\r\n    <h2 style=\"text-align: center;\">Items</h2>\r\n    <canvas id=\"sensorChart\"></canvas>\r\n    <body>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Level: {{ item.ultrasonic }} Cm</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Nutrition: {{ item.nutrition }} PPM</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Temperature: {{ item.temperature }} C</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Ph: {{ item.ph }} </h4>\r\n    </body>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\nimport axios from '@/axios';\r\nexport default {\r\n  data() {\r\n    return {\r\n      item: '',\r\n      items: [],\r\n      chart: null // Chart instance\r\n    }\r\n  },\r\n  methods: {\r\n    getData() {\r\n      axios\r\n        .get(\"/\")\r\n        .then((response) => {\r\n          this.items = response.data;\r\n          this.updateChart();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    },\r\n    updateChart() {\r\n      // Access the canvas element and create a chart with the fetched data\r\n      let ctx = document.getElementById('sensorChart').getContext('2d');\r\n      let labels = this.items.map(item => item.created_at);\r\n      let values = this.items.map(item => item.ultrasonic);\r\n      \r\n      if (this.chart) {\r\n        this.chart.destroy(); // destroy existing Chart instance\r\n      }\r\n      \r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar', // Set the chart type to bar\r\n        data: {\r\n          labels: labels, // Set the labels for the x-axis\r\n          datasets: [{\r\n            label: 'Water Level (Cm)', // Set the label for the chart\r\n            data: values, // Set the data for the y-axis\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\r\n            borderWidth: 1 // Set the border width for the bars\r\n          }]\r\n        },\r\n        options: {\r\n          //animation: true,\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n  },\r\n  mounted () {\r\n    setInterval(this.getData, 2000);\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh4 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n\r\nh2{\r\n  margin-bottom: 70px;\r\n}\r\n.hello{\r\n  padding: 50px;\r\n  text-align: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  display: column;\r\n}\r\n</style>\r\n"],"mappings":"AAeA,OAAOA,KAAI,MAAO,eAAe;AACjC,OAAOC,KAAI,MAAO,SAAS;AAC3B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,IAAG,CAAE;IACd;EACF,CAAC;;EACDC,OAAO,EAAE;IACPC,OAAOA,CAAA,EAAG;MACRN,KAAI,CACDO,GAAG,CAAC,GAAG,EACPC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACN,KAAI,GAAIM,QAAQ,CAACR,IAAI;QAC1B,IAAI,CAACS,WAAW,EAAE;MACpB,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CAAC;IACN,CAAC;IACDF,WAAWA,CAAA,EAAG;MACZ;MACA,IAAIK,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;MACjE,IAAIC,MAAK,GAAI,IAAI,CAAChB,KAAK,CAACiB,GAAG,CAAClB,IAAG,IAAKA,IAAI,CAACmB,UAAU,CAAC;MACpD,IAAIC,MAAK,GAAI,IAAI,CAACnB,KAAK,CAACiB,GAAG,CAAClB,IAAG,IAAKA,IAAI,CAACqB,UAAU,CAAC;MAEpD,IAAI,IAAI,CAACnB,KAAK,EAAE;QACd,IAAI,CAACA,KAAK,CAACoB,OAAO,EAAE,EAAE;MACxB;;MAEA,IAAI,CAACpB,KAAI,GAAI,IAAIL,KAAK,CAACgB,GAAG,EAAE;QAC1BU,IAAI,EAAE,KAAK;QAAE;QACbxB,IAAI,EAAE;UACJkB,MAAM,EAAEA,MAAM;UAAE;UAChBO,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,kBAAkB;YAAE;YAC3B1B,IAAI,EAAEqB,MAAM;YAAE;YACdM,eAAe,EAAE,yBAAyB;YAAE;YAC5CC,WAAW,EAAE,uBAAuB;YAAE;YACtCC,WAAW,EAAE,EAAE;UACjB,CAAC;QACH,CAAC;;QACDC,OAAO,EAAE;UACP;UACAC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EACDC,OAAMA,CAAA,EAAK;IACTC,WAAW,CAAC,IAAI,CAAC/B,OAAO,EAAE,IAAI,CAAC;EACjC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}