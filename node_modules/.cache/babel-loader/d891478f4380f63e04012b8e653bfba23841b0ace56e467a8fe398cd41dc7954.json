{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport axios from '@/axios';\nexport default {\n  data() {\n    return {\n      items: [],\n      chart: null\n    };\n  },\n  methods: {\n    getData() {\n      axios.get(\"/all\").then(response => {\n        this.items = response.data;\n        let latestData = this.items.slice(-1);\n        this.updateChart();\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    updateChart() {\n      // Access the canvas element and create a chart with the fetched data\n      let ctx = document.getElementById('sensorChart').getContext('2d');\n\n      // Get the latest 10 values from the fetched data\n      let latestItems = this.items.slice(-10); // Get the last 10 items\n      let labels = latestItems.map(item => item.created_at); // Get the created_at values for the labels\n      let values = latestItems.map(item => item.ultrasonic); // Get the ultrasonic values for the data\n\n      if (this.chart) {\n        this.chart.destroy(); // Destroy existing Chart instance\n      }\n\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        // Set the chart type to bar\n        data: {\n          labels: labels,\n          // Set the labels for the x-axis\n          datasets: [{\n            label: 'Water Level (Cm)',\n            // Set the label for the chart\n            data: values,\n            // Set the data for the y-axis\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            // Set the background color for the bars\n            borderColor: 'rgba(75, 192, 192, 1)',\n            // Set the border color for the bars\n            borderWidth: 1 // Set the border width for the bars\n          }]\n        },\n\n        options: {\n          animation: false,\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  },\n  mounted() {\n    setInterval(this.getData, 2000);\n  }\n};","map":{"version":3,"names":["Chart","axios","data","items","chart","methods","getData","get","then","response","latestData","slice","updateChart","catch","error","console","log","ctx","document","getElementById","getContext","latestItems","labels","map","item","created_at","values","ultrasonic","destroy","type","datasets","label","backgroundColor","borderColor","borderWidth","options","animation","responsive","scales","y","beginAtZero","mounted","setInterval"],"sources":["C:\\Users\\LEGION\\t\\Project_Magang-1\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <h1>Fetch Sensor Data</h1>\r\n    <h2 style=\"text-align: center;\">Items</h2>\r\n    <body>\r\n      <div>\r\n        <canvas id=\"sensorChart\"></canvas>\r\n      </div>\r\n      <div>\r\n        <canvas id=\"sensorChart\"></canvas>\r\n      </div>\r\n      <!--   \r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Level: {{ latestData.ultrasonic }} Cm</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Nutrition: {{ latestData.nutrition }} PPM</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Temperature: {{ latestData.temperature }} C</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Ph: {{ latestData.ph }} </h4>-->\r\n    </body>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\nimport axios from '@/axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      items: [],\r\n      chart: null\r\n    }\r\n  },\r\n  methods: {\r\n    getData() {\r\n      axios\r\n      .get(\"/all\")\r\n      .then((response) => {\r\n        this.items = response.data;\r\n        let latestData = this.items.slice(-1);\r\n        this.updateChart();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n    },\r\n    updateChart() {\r\n      // Access the canvas element and create a chart with the fetched data\r\n      let ctx = document.getElementById('sensorChart').getContext('2d');\r\n\r\n      // Get the latest 10 values from the fetched data\r\n      let latestItems = this.items.slice(-10); // Get the last 10 items\r\n      let labels = latestItems.map(item => item.created_at); // Get the created_at values for the labels\r\n      let values = latestItems.map(item => item.ultrasonic); // Get the ultrasonic values for the data\r\n      \r\n      if (this.chart) {\r\n        this.chart.destroy(); // Destroy existing Chart instance\r\n      }\r\n      this.chart = new Chart(ctx, {\r\n        type: 'line', // Set the chart type to bar\r\n        data: {\r\n          labels: labels, // Set the labels for the x-axis\r\n          datasets: [{\r\n            label: 'Water Level (Cm)', // Set the label for the chart\r\n            data: values, // Set the data for the y-axis\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\r\n            borderWidth: 1 // Set the border width for the bars\r\n          }]\r\n        },\r\n        options: {\r\n          animation: false,\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n  },\r\n  mounted () {\r\n    setInterval(this.getData, 2000);\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh4 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n\r\nh2{\r\n  margin-bottom: 70px;\r\n}\r\n.hello{\r\n  padding: 50px;\r\n}\r\n</style>\r\n"],"mappings":"AAqBA,OAAOA,KAAI,MAAO,eAAe;AACjC,OAAOC,KAAI,MAAO,SAAS;AAE3B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,OAAOA,CAAA,EAAG;MACRL,KAAI,CACHM,GAAG,CAAC,MAAM,EACVC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACN,KAAI,GAAIM,QAAQ,CAACP,IAAI;QAC1B,IAAIQ,UAAS,GAAI,IAAI,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAACC,WAAW,EAAE;MACpB,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC;IACH,CAAC;IACDF,WAAWA,CAAA,EAAG;MACZ;MACA,IAAIK,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;;MAEjE;MACA,IAAIC,WAAU,GAAI,IAAI,CAAClB,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;MACzC,IAAIW,MAAK,GAAID,WAAW,CAACE,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,UAAU,CAAC,EAAE;MACvD,IAAIC,MAAK,GAAIL,WAAW,CAACE,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACG,UAAU,CAAC,EAAE;;MAEvD,IAAI,IAAI,CAACvB,KAAK,EAAE;QACd,IAAI,CAACA,KAAK,CAACwB,OAAO,EAAE,EAAE;MACxB;;MACA,IAAI,CAACxB,KAAI,GAAI,IAAIJ,KAAK,CAACiB,GAAG,EAAE;QAC1BY,IAAI,EAAE,MAAM;QAAE;QACd3B,IAAI,EAAE;UACJoB,MAAM,EAAEA,MAAM;UAAE;UAChBQ,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,kBAAkB;YAAE;YAC3B7B,IAAI,EAAEwB,MAAM;YAAE;YACdM,eAAe,EAAE,yBAAyB;YAAE;YAC5CC,WAAW,EAAE,uBAAuB;YAAE;YACtCC,WAAW,EAAE,EAAE;UACjB,CAAC;QACH,CAAC;;QACDC,OAAO,EAAE;UACPC,SAAS,EAAE,KAAK;UAChBC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EACDC,OAAMA,CAAA,EAAK;IACTC,WAAW,CAAC,IAAI,CAACpC,OAAO,EAAE,IAAI,CAAC;EACjC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}