{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<h1 data-v-469af010>Fetch Sensor Data</h1><h2 style=\\\"text-align:center;\\\" data-v-469af010>Items</h2><div class=\\\"chart-container\\\" data-v-469af010><div class=\\\"chart-row\\\" data-v-469af010><canvas id=\\\"ultrasonicChart\\\" data-v-469af010></canvas><canvas id=\\\"nutritionChart\\\" data-v-469af010></canvas></div><div class=\\\"chart-row\\\" data-v-469af010><canvas id=\\\"temperatureChart\\\" data-v-469af010></canvas><canvas id=\\\"phChart\\\" data-v-469af010></canvas></div></div>\", 3);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"body\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, item => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: item.id\n    }, \"Water Level: \" + _toDisplayString(_ctx.latestData.ultrasonic) + \" Cm\", 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, item => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: item.id\n    }, \"Nutrition: \" + _toDisplayString(_ctx.latestData.nutrition) + \" PPM\", 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, item => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: item.id\n    }, \"Water Temperature: \" + _toDisplayString(_ctx.latestData.temperature) + \" C\", 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, item => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: item.id\n    }, \"Ph: \" + _toDisplayString(_ctx.latestData.ph), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_hoisted_2","_createElementVNode","_Fragment","_renderList","$data","items","item","key","id","_toDisplayString","_ctx","latestData","ultrasonic","nutrition","temperature","ph"],"sources":["C:\\Users\\LEGION\\t\\Project_Magang-1\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <h1>Fetch Sensor Data</h1>\r\n    <h2 style=\"text-align: center;\">Items</h2>\r\n    <div class=\"chart-container\">\r\n    <div class=\"chart-row\">\r\n      <canvas id=\"ultrasonicChart\"></canvas>\r\n      <canvas id=\"nutritionChart\"></canvas>\r\n    </div>\r\n    <div class=\"chart-row\">\r\n      <canvas id=\"temperatureChart\"></canvas>\r\n      <canvas id=\"phChart\"></canvas>\r\n    </div>\r\n  </div>\r\n    <body>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Level: {{ latestData.ultrasonic }} Cm</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Nutrition: {{ latestData.nutrition }} PPM</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Temperature: {{ latestData.temperature }} C</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Ph: {{ latestData.ph }} </h4>\r\n    </body>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\nimport axios from '@/axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      items: [],\r\n      chart: null\r\n    }\r\n  },\r\n  methods: {\r\n    getData() {\r\n      axios\r\n      .get(\"/all\")\r\n      .then((response) => {\r\n        this.items = response.data;\r\n        //let latestData = this.items.slice(-1);\r\n        this.updateChart();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n    },\r\n    updateChart() {\r\n      // Access the canvas element and create a chart with the fetched data\r\n      let ctx1 = document.getElementById('ultrasonicChart').getContext('2d');\r\n      let ctx2 = document.getElementById('nutritionChart').getContext('2d');\r\n      let ctx3 = document.getElementById('temperatureChart').getContext('2d');\r\n      let ctx4 = document.getElementById('phChart').getContext('2d');\r\n\r\n      // Get the latest 10 values from the fetched data\r\n      let latestItems = this.items.slice(-10); // Get the last 10 items\r\n      let labels1 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\r\n      let values1 = latestItems.map(item => item.ultrasonic); // Get the ultrasonic values for the data\r\n      let labels2 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\r\n      let values2 = latestItems.map(item => item.nutrition); // Get the nutrition values for the data\r\n      let labels3 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\r\n      let values3 = latestItems.map(item => item.temperature); // Get the temperature values for the data\r\n      let labels4 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\r\n      let values4 = latestItems.map(item => item.ph); // Get the ph values for the data\r\n\r\n      \r\n      if (this.ultrasonicchart) {\r\n        this.ultrasonicchart.destroy(); // Destroy existing Chart instance\r\n      }\r\n      this.ultrasonicchart = new Chart(ctx1, {\r\n        type: 'line', // Set the chart type to bar\r\n        data: {\r\n          labels: labels1, // Set the labels for the x-axis\r\n          datasets: [{\r\n            label: 'Water Level (Cm)', // Set the label for the chart\r\n            data: values1, // Set the data for the y-axis\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\r\n            borderWidth: 1 // Set the border width for the bars\r\n          },\r\n          {\r\n            label: 'Nutrition (ppm)', // Set the label for the chart\r\n            data: values2, // Set the data for the y-axis\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\r\n            borderWidth: 1 // Set the border width for the bars\r\n          }]\r\n        },\r\n        options: {\r\n          animation: false,\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      if (this.nutritionchart) {\r\n        this.nutritionchart.destroy(); // Destroy existing Chart instance\r\n      }\r\n      this.nutritionchart = new Chart(ctx2, {\r\n        type: 'line', // Set the chart type to bar\r\n        data: {\r\n          labels: labels2, // Set the labels for the x-axis\r\n          datasets: [{\r\n            label: 'Nutrition (ppm)', // Set the label for the chart\r\n            data: values2, // Set the data for the y-axis\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\r\n            borderWidth: 1 // Set the border width for the bars\r\n          }]\r\n        },\r\n        options: {\r\n          animation: false,\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      if (this.temperaturechart) {\r\n        this.temperaturechart.destroy(); // Destroy existing Chart instance\r\n      }\r\n      this.temperaturechart = new Chart(ctx3, {\r\n        type: 'line', // Set the chart type to bar\r\n        data: {\r\n          labels: labels3, // Set the labels for the x-axis\r\n          datasets: [{\r\n            label: 'Temperature (C)', // Set the label for the chart\r\n            data: values3, // Set the data for the y-axis\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\r\n            borderWidth: 1 // Set the border width for the bars\r\n          }]\r\n        },\r\n        options: {\r\n          animation: false,\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      if (this.phchart) {\r\n        this.phchart.destroy(); // Destroy existing Chart instance\r\n      }\r\n      this.phchart = new Chart(ctx4, {\r\n        type: 'line', // Set the chart type to bar\r\n        data: {\r\n          labels: labels4, // Set the labels for the x-axis\r\n          datasets: [{\r\n            label: 'PH', // Set the label for the chart\r\n            data: values4, // Set the data for the y-axis\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\r\n            borderWidth: 1 // Set the border width for the bars\r\n          }]\r\n        },\r\n        options: {\r\n          animation: false,\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n    },\r\n  },\r\n  mounted () {\r\n    setInterval(this.getData, 2000);\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh4 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n\r\nh2{\r\n  margin-bottom: 70px;\r\n}\r\n.hello{\r\n  padding: 50px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAO;;;uBAAlBC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJC,UAA0B,EAY1BC,mBAAA,CAKO,gB,kBAJLH,mBAAA,CAAyFI,SAAA,QAAAC,WAAA,CAAtEC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfR,mBAAA,CAAyF;MAA9DS,GAAG,EAAED,IAAI,CAACE;OAAI,eAAa,GAAAC,gBAAA,CAAGC,IAAA,CAAAC,UAAU,CAACC,UAAU,IAAG,KAAG;qDACpFd,mBAAA,CAAuFI,SAAA,QAAAC,WAAA,CAApEC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfR,mBAAA,CAAuF;MAA5DS,GAAG,EAAED,IAAI,CAACE;OAAI,aAAW,GAAAC,gBAAA,CAAGC,IAAA,CAAAC,UAAU,CAACE,SAAS,IAAG,MAAI;qDAClFf,mBAAA,CAA+FI,SAAA,QAAAC,WAAA,CAA5EC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfR,mBAAA,CAA+F;MAApES,GAAG,EAAED,IAAI,CAACE;OAAI,qBAAmB,GAAAC,gBAAA,CAAGC,IAAA,CAAAC,UAAU,CAACG,WAAW,IAAG,IAAE;qDAC1FhB,mBAAA,CAAsEI,SAAA,QAAAC,WAAA,CAAnDC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfR,mBAAA,CAAsE;MAA3CS,GAAG,EAAED,IAAI,CAACE;OAAI,MAAI,GAAAC,gBAAA,CAAGC,IAAA,CAAAC,UAAU,CAACI,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}