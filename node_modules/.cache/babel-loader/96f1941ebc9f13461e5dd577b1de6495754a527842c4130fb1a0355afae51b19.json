{"ast":null,"code":"import axios from '@/axios';\nimport Chart from 'chart.js'; // Import Chart.js library\n\nexport default {\n  data() {\n    return {\n      items: [],\n      // Change data property name to 'items'\n      chart: null // Add a chart instance property\n    };\n  },\n\n  methods: {\n    getData() {\n      axios.get(\"/\").then(response => {\n        this.items = response.data;\n        this.updateChart(); // Update the chart with new data\n      }).catch(error => {\n        console.log('Error:', error);\n      });\n    },\n    updateChart() {\n      // Update chart data and labels\n      this.chart.data.labels = this.items.map(item => item.id);\n      this.chart.data.datasets[0].data = this.items.map(item => item.ultrasonic);\n      this.chart.update(); // Update the chart\n    }\n  },\n\n  mounted() {\n    // Create chart instance and call getData()\n    this.chart = new Chart(this.$refs.chart.getContext('2d'), {\n      type: 'bar',\n      // Set chart type to 'bar'\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Water Level (Cm)',\n          data: [],\n          backgroundColor: '#42b983'\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n    this.getData();\n    setInterval(this.getData, 2000);\n  }\n};","map":{"version":3,"names":["axios","Chart","data","items","chart","methods","getData","get","then","response","updateChart","catch","error","console","log","labels","map","item","id","datasets","ultrasonic","update","mounted","$refs","getContext","type","label","backgroundColor","options","responsive","maintainAspectRatio","setInterval"],"sources":["C:\\Users\\LEGION\\t\\Project_Magang-1\\src\\components\\HelloWorld.vue"],"sourcesContent":["<!-- eslint-disable no-undef -->\r\n<template>\r\n  <div class=\"hello\">\r\n    <h1>Fetch Sensor Data</h1>\r\n    <h2 style=\"text-align: center;\">Items</h2>\r\n    <div>\r\n      <canvas ref=\"chart\" width=\"400\" height=\"300\"></canvas> <!-- Add canvas element for the chart -->\r\n    </div>\r\n    <div>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Level: {{ item.ultrasonic }} Cm</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Nutrition: {{ item.nutrition }} PPM</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Temperature: {{ item.temperature }} C</h4>\r\n      <h4 v-for=\"item in items\" :key=\"item.id\">Ph: {{ item.ph }} </h4>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from '@/axios';\r\nimport Chart from 'chart.js'; // Import Chart.js library\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      items: [], // Change data property name to 'items'\r\n      chart: null, // Add a chart instance property\r\n    };\r\n  },\r\n  methods: {\r\n    getData() {\r\n      axios\r\n        .get(\"/\")\r\n        .then((response) => {\r\n          this.items = response.data;\r\n          this.updateChart(); // Update the chart with new data\r\n        })\r\n        .catch((error) => {\r\n          console.log('Error:', error);\r\n        });\r\n    },\r\n    updateChart() {\r\n      // Update chart data and labels\r\n      this.chart.data.labels = this.items.map(item => item.id);\r\n      this.chart.data.datasets[0].data = this.items.map(item => item.ultrasonic);\r\n      this.chart.update(); // Update the chart\r\n    },\r\n  },\r\n  mounted() {\r\n    // Create chart instance and call getData()\r\n    this.chart = new Chart(this.$refs.chart.getContext('2d'), {\r\n      type: 'bar', // Set chart type to 'bar'\r\n      data: {\r\n        labels: [],\r\n        datasets: [{\r\n          label: 'Water Level (Cm)',\r\n          data: [],\r\n          backgroundColor: '#42b983',\r\n        }],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n      },\r\n    });\r\n\r\n    this.getData();\r\n    setInterval(this.getData, 2000);\r\n  },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh4 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n\r\nh2{\r\n  margin-bottom: 70px;\r\n}\r\n.hello{\r\n  padding: 50px;\r\n  text-align: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  display: column;\r\n}\r\n\r\n</style>\r\n"],"mappings":"AAkBA,OAAOA,KAAI,MAAO,SAAS;AAC3B,OAAOC,KAAI,MAAO,UAAU,EAAE;;AAE9B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MAAE;MACXC,KAAK,EAAE,IAAI,CAAE;IACf,CAAC;EACH,CAAC;;EACDC,OAAO,EAAE;IACPC,OAAOA,CAAA,EAAG;MACRN,KAAI,CACDO,GAAG,CAAC,GAAG,EACPC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACN,KAAI,GAAIM,QAAQ,CAACP,IAAI;QAC1B,IAAI,CAACQ,WAAW,EAAE,EAAE;MACtB,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;MAC9B,CAAC,CAAC;IACN,CAAC;IACDF,WAAWA,CAAA,EAAG;MACZ;MACA,IAAI,CAACN,KAAK,CAACF,IAAI,CAACa,MAAK,GAAI,IAAI,CAACZ,KAAK,CAACa,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAE,CAAC;MACxD,IAAI,CAACd,KAAK,CAACF,IAAI,CAACiB,QAAQ,CAAC,CAAC,CAAC,CAACjB,IAAG,GAAI,IAAI,CAACC,KAAK,CAACa,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACG,UAAU,CAAC;MAC1E,IAAI,CAAChB,KAAK,CAACiB,MAAM,EAAE,EAAE;IACvB;EACF,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAAClB,KAAI,GAAI,IAAIH,KAAK,CAAC,IAAI,CAACsB,KAAK,CAACnB,KAAK,CAACoB,UAAU,CAAC,IAAI,CAAC,EAAE;MACxDC,IAAI,EAAE,KAAK;MAAE;MACbvB,IAAI,EAAE;QACJa,MAAM,EAAE,EAAE;QACVI,QAAQ,EAAE,CAAC;UACTO,KAAK,EAAE,kBAAkB;UACzBxB,IAAI,EAAE,EAAE;UACRyB,eAAe,EAAE;QACnB,CAAC;MACH,CAAC;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE;MACvB;IACF,CAAC,CAAC;IAEF,IAAI,CAACxB,OAAO,EAAE;IACdyB,WAAW,CAAC,IAAI,CAACzB,OAAO,EAAE,IAAI,CAAC;EACjC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}