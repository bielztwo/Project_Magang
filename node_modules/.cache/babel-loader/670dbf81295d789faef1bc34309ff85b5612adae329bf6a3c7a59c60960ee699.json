{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<h1 data-v-469af010>Fetch Sensor Data</h1><h2 style=\\\"text-align:center;\\\" data-v-469af010>Items</h2><div class=\\\"chart-container\\\" data-v-469af010><div class=\\\"chart-row\\\" data-v-469af010><canvas id=\\\"ultrasonicChart\\\" data-v-469af010></canvas><canvas id=\\\"nutritionChart\\\" data-v-469af010></canvas></div><div class=\\\"chart-row\\\" data-v-469af010><canvas id=\\\"temperatureChart\\\" data-v-469af010></canvas><canvas id=\\\"phChart\\\" data-v-469af010></canvas></div></div><body data-v-469af010><!--&lt;h4 v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;Water Level: {{ latestData.ultrasonic }} Cm&lt;/h4&gt;\\n      &lt;h4 v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;Nutrition: {{ latestData.nutrition }} PPM&lt;/h4&gt;\\n      &lt;h4 v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;Water Temperature: {{ latestData.temperature }} C&lt;/h4&gt;\\n      &lt;h4 v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;Ph: {{ latestData.ph }} &lt;/h4&gt;--></body>\", 4);\nconst _hoisted_6 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_6);\n}","map":{"version":3,"names":["class","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_6"],"sources":["/home/cello/Project_Magang/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>Fetch Sensor Data</h1>\n    <h2 style=\"text-align: center;\">Items</h2>\n    <div class=\"chart-container\">\n    <div class=\"chart-row\">\n      <canvas id=\"ultrasonicChart\"></canvas>\n      <canvas id=\"nutritionChart\"></canvas>\n    </div>\n    <div class=\"chart-row\">\n      <canvas id=\"temperatureChart\"></canvas>\n      <canvas id=\"phChart\"></canvas>\n    </div>\n  </div>\n    <body>\n      <!--<h4 v-for=\"item in items\" :key=\"item.id\">Water Level: {{ latestData.ultrasonic }} Cm</h4>\n      <h4 v-for=\"item in items\" :key=\"item.id\">Nutrition: {{ latestData.nutrition }} PPM</h4>\n      <h4 v-for=\"item in items\" :key=\"item.id\">Water Temperature: {{ latestData.temperature }} C</h4>\n      <h4 v-for=\"item in items\" :key=\"item.id\">Ph: {{ latestData.ph }} </h4>-->\n    </body>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\nimport axios from '@/axios';\n\nexport default {\n  data() {\n    return {\n      items: [],\n      chart: null\n    }\n  },\n  methods: {\n    getData() {\n      axios\n      .get(\"/all\")\n      .then((response) => {\n        this.items = response.data;\n        //let latestData = this.items.slice(-1);\n        this.updateChart();\n      })\n      .catch((error) => {\n        //console.log(error);\n      })\n    },\n    updateChart() {\n      // Access the canvas element and create a chart with the fetched data\n      let ctx1 = document.getElementById('ultrasonicChart').getContext('2d');\n      let ctx2 = document.getElementById('nutritionChart').getContext('2d');\n      let ctx3 = document.getElementById('temperatureChart').getContext('2d');\n      let ctx4 = document.getElementById('phChart').getContext('2d');\n\n      // Get the latest 10 values from the fetched data\n      let latestItems = this.items.slice(-10); // Get the last 10 items\n      let labels1 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\n      let values1 = latestItems.map(item => item.ultrasonic); // Get the ultrasonic values for the data\n      let labels2 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\n      let values2 = latestItems.map(item => item.nutrition); // Get the nutrition values for the data\n      let labels3 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\n      let values3 = latestItems.map(item => item.temperature); // Get the temperature values for the data\n      let labels4 = latestItems.map(item => item.created_at); // Get the created_at values for the labels\n      let values4 = latestItems.map(item => item.ph); // Get the ph values for the data\n\n      \n      if (this.ultrasonicchart) {\n        this.ultrasonicchart.destroy(); // Destroy existing Chart instance\n      }\n      this.ultrasonicchart = new Chart(ctx1, {\n        type: 'line', // Set the chart type to bar\n        data: {\n          labels: labels1, // Set the labels for the x-axis\n          datasets: [{\n            label: 'Water Level (Cm)', // Set the label for the chart\n            data: values1, // Set the data for the y-axis\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\n            borderWidth: 1 // Set the border width for the bars\n          },\n          {\n            label: 'Nutrition (ppm)', // Set the label for the chart\n            data: values2, // Set the data for the y-axis\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\n            borderWidth: 1 // Set the border width for the bars\n          }]\n        },\n        options: {\n          animation: false,\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n\n      if (this.nutritionchart) {\n        this.nutritionchart.destroy(); // Destroy existing Chart instance\n      }\n      this.nutritionchart = new Chart(ctx2, {\n        type: 'line', // Set the chart type to bar\n        data: {\n          labels: labels2, // Set the labels for the x-axis\n          datasets: [{\n            label: 'Nutrition (ppm)', // Set the label for the chart\n            data: values2, // Set the data for the y-axis\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\n            borderWidth: 1 // Set the border width for the bars\n          }]\n        },\n        options: {\n          animation: false,\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n\n      if (this.temperaturechart) {\n        this.temperaturechart.destroy(); // Destroy existing Chart instance\n      }\n      this.temperaturechart = new Chart(ctx3, {\n        type: 'line', // Set the chart type to bar\n        data: {\n          labels: labels3, // Set the labels for the x-axis\n          datasets: [{\n            label: 'Temperature (C)', // Set the label for the chart\n            data: values3, // Set the data for the y-axis\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\n            borderWidth: 1 // Set the border width for the bars\n          }]\n        },\n        options: {\n          animation: false,\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n\n      if (this.phchart) {\n        this.phchart.destroy(); // Destroy existing Chart instance\n      }\n      this.phchart = new Chart(ctx4, {\n        type: 'line', // Set the chart type to bar\n        data: {\n          labels: labels4, // Set the labels for the x-axis\n          datasets: [{\n            label: 'PH', // Set the label for the chart\n            data: values4, // Set the data for the y-axis\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set the background color for the bars\n            borderColor: 'rgba(75, 192, 192, 1)', // Set the border color for the bars\n            borderWidth: 1 // Set the border width for the bars\n          }]\n        },\n        options: {\n          animation: false,\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n\n    },\n  },\n  mounted () {\n    setInterval(this.getData, 2000);\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh4 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\nh2{\n  margin-bottom: 70px;\n}\n.hello{\n  padding: 50px;\n}\n.chart-container {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.chart-row {\n  width: 50%;\n  padding: 10px;\n  box-sizing: border-box;\n}\n\ncanvas {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAO;;oBAChBC,UAA0B,C;;uBAD5BC,mBAAA,CAmBM,OAnBNC,UAmBM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}